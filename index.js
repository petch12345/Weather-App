// State
let currentWeatherData = null;
let isCelsius = true;
let isDarkMode = localStorage.getItem('darkMode') === 'true';

// API Config
const API_KEY = '5488401f926327aa1217407a2c7d1243';
const API_BASE = 'https://api.openweathermap.org/data/2.5';

// Favorites
let favorites = JSON.parse(localStorage.getItem('favorites') || '[]');

// Weather Icons
const ICONS = {
    'Clear': '‚òÄÔ∏è', 'Clouds': '‚òÅÔ∏è', 'Rain': 'üåßÔ∏è', 'Drizzle': 'üå¶Ô∏è',
    'Thunderstorm': '‚õàÔ∏è', 'Snow': '‚ùÑÔ∏è', 'Mist': 'üå´Ô∏è', 'Fog': 'üå´Ô∏è', 'Haze': 'üå´Ô∏è'
};

// Fallback Data

const getIcon = (main) => ICONS[main] || 'üå§Ô∏è';
// Get Weather Data
async function getWeatherData(city) {
    try {
        const [weatherRes, forecastRes] = await Promise.all([
            fetch(`${API_BASE}/weather?q=${encodeURIComponent(city)}&appid=${API_KEY}&units=metric&lang=th`),
            fetch(`${API_BASE}/forecast?q=${encodeURIComponent(city)}&appid=${API_KEY}&units=metric&lang=th`)
        ]);

        if (!weatherRes.ok) throw new Error(`‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏°‡∏∑‡∏≠‡∏á "${city}" ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏∞‡∏Å‡∏î`);

        const weather = await weatherRes.json();
        const forecast = forecastRes.ok ? await forecastRes.json() : null;

        // ‡πÅ‡∏õ‡∏•‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®
        const weatherDesc = translateWeather(weather.weather[0].description, weather.weather[0].main);

        return {
            name: weather.name,
            weather: weatherDesc,
            icon: getIcon(weather.weather[0].main),
            temp: Math.round(weather.main.temp),
            humidity: weather.main.humidity,
            windSpeed: Math.round(weather.wind?.speed * 3.6 || 0),
            feelsLike: Math.round(weather.main.feels_like),
            forecast: forecast ? processForecast(forecast) : generateForecast(weather.weather[0].main, Math.round(weather.main.temp))
        };
    } catch (error) {
        console.error('API Error:', error);
        throw new Error(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏Ç‡∏≠‡∏á "${city}" ‡πÑ‡∏î‡πâ\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï`);
    }
}

// ‡πÅ‡∏õ‡∏•‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®
function translateWeather(desc, main) {
    const translations = {
        'clear sky': '‡∏ó‡πâ‡∏≠‡∏á‡∏ü‡πâ‡∏≤‡πÅ‡∏à‡πà‡∏°‡πÉ‡∏™',
        'few clouds': '‡∏°‡∏µ‡πÄ‡∏°‡∏Ü‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢',
        'scattered clouds': '‡∏°‡∏µ‡πÄ‡∏°‡∏Ü‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢',
        'broken clouds': '‡∏°‡∏µ‡πÄ‡∏°‡∏Ü‡∏°‡∏≤‡∏Å',
        'overcast clouds': '‡∏ó‡πâ‡∏≠‡∏á‡∏ü‡πâ‡∏≤‡∏Ñ‡∏£‡∏∂‡πâ‡∏°',
        'light rain': '‡∏ù‡∏ô‡∏ï‡∏Å‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢',
        'moderate rain': '‡∏ù‡∏ô‡∏ï‡∏Å‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á',
        'heavy rain': '‡∏ù‡∏ô‡∏ï‡∏Å‡∏´‡∏ô‡∏±‡∏Å',
        'thunderstorm': '‡∏ù‡∏ô‡∏ü‡πâ‡∏≤‡∏Ñ‡∏∞‡∏ô‡∏≠‡∏á',
        'snow': '‡∏´‡∏¥‡∏°‡∏∞‡∏ï‡∏Å',
        'mist': '‡∏´‡∏°‡∏≠‡∏Å‡∏ö‡∏≤‡∏á',
        'fog': '‡∏´‡∏°‡∏≠‡∏Å‡∏´‡∏ô‡∏≤'
    };

    return translations[desc.toLowerCase()] || desc;
}

// Search Weather
async function searchWeather() {
    const city = document.getElementById('cityInput').value.trim();
    if (!city) return alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏°‡∏∑‡∏≠‡∏á');

    const btn = document.querySelector('button[onclick="searchWeather()"]');
    const original = btn.innerHTML;
    btn.innerHTML = '<span>‚è≥</span> ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤...';
    btn.disabled = true;

    try {
        const data = await getWeatherData(city);
        displayWeather(data);
        document.getElementById('cityInput').value = '';
    } catch (error) {
        alert(error.message);
    } finally {
        btn.innerHTML = original;
        btn.disabled = false;
    }
}

// Display Weather
function displayWeather(data) {
    currentWeatherData = data;

    document.getElementById('cityName').textContent = data.name;
    document.getElementById('weatherIcon').textContent = data.icon;
    document.getElementById('weatherDescription').textContent = data.weather;
    document.getElementById('temperature').textContent = `${data.temp}¬∞C`;
    document.getElementById('humidity').textContent = `${data.humidity}%`;
    document.getElementById('windSpeed').textContent = `${data.windSpeed} km/h`;
    document.getElementById('feelsLike').textContent = `${data.feelsLike}¬∞C`;

    document.getElementById('weatherDisplay').classList.remove('hidden');
    displayForecast(data.forecast);
}

// Display Forecast
function displayForecast(forecast) {
    const container = document.getElementById('forecastContainer');
    container.innerHTML = forecast.map(day => `
                <div class="glass rounded-2xl p-6 text-center transition-transform hover:scale-105">
                    <p class="text-white/70 text-sm mb-3">${day.day}</p>
                    <div class="text-4xl mb-4">${day.icon}</div>
                    <p class="text-white font-semibold">${day.high}¬∞</p>
                    <p class="text-white/60 text-sm">${day.low}¬∞</p>
                </div>
            `).join('');

    document.getElementById('forecastDisplay').classList.remove('hidden');
}

// Process Forecast
function processForecast(data) {
    const days = ['‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ', '‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ', '‡∏ß‡∏±‡∏ô‡∏û‡∏∏‡∏ò', '‡∏ß‡∏±‡∏ô‡∏û‡∏§‡∏´‡∏±‡∏™', '‡∏ß‡∏±‡∏ô‡∏®‡∏∏‡∏Å‡∏£‡πå'];
    const daily = {};

    data.list.forEach(item => {
        const date = new Date(item.dt * 1000).toDateString();
        if (!daily[date]) daily[date] = { temps: [], weather: item.weather[0] };
        daily[date].temps.push(item.main.temp);
    });

    return Object.keys(daily).slice(0, 5).map((date, i) => ({
        day: days[i],
        icon: getIcon(daily[date].weather.main),
        high: Math.round(Math.max(...daily[date].temps)),
        low: Math.round(Math.min(...daily[date].temps))
    }));
}

// Generate Forecast
function generateForecast(type, temp) {
    const days = ['‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ', '‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ', '‡∏ß‡∏±‡∏ô‡∏û‡∏∏‡∏ò', '‡∏ß‡∏±‡∏ô‡∏û‡∏§‡∏´‡∏±‡∏™', '‡∏ß‡∏±‡∏ô‡∏®‡∏∏‡∏Å‡∏£‡πå'];
    const patterns = {
        'Clear': ['‚òÄÔ∏è', 'üå§Ô∏è', '‚òÄÔ∏è', 'üå§Ô∏è', '‚òÄÔ∏è'],
        'Clouds': ['‚òÅÔ∏è', '‚õÖ', '‚òÅÔ∏è', 'üå§Ô∏è', '‚õÖ'],
        'Rain': ['üåßÔ∏è', 'üå¶Ô∏è', '‚òÅÔ∏è', 'üå§Ô∏è', '‚òÄÔ∏è']
    };

    return days.map((day, i) => ({
        day,
        icon: (patterns[type] || patterns['Clear'])[i],
        high: temp + Math.floor(Math.random() * 6) - 3,
        low: temp - 8 + Math.floor(Math.random() * 4)
    }));
}

// Share Weather
function shareWeather() {
    if (!currentWeatherData) return;
    const text = `${currentWeatherData.name}: ${currentWeatherData.weather} ${currentWeatherData.temp}¬∞C`;

    if (navigator.share) {
        navigator.share({ title: '‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®', text });
    } else {
        navigator.clipboard.writeText(text).then(() => alert('‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß!'));
    }
}

// Toggle Unit
function toggleUnit() {
    if (!currentWeatherData) return;
    isCelsius = !isCelsius;

    const temp = isCelsius ? currentWeatherData.temp : Math.round(currentWeatherData.temp * 9 / 5 + 32);
    const feels = isCelsius ? currentWeatherData.feelsLike : Math.round(currentWeatherData.feelsLike * 9 / 5 + 32);
    const unit = isCelsius ? 'C' : 'F';

    document.getElementById('temperature').textContent = `${temp}¬∞${unit}`;
    document.getElementById('feelsLike').textContent = `${feels}¬∞${unit}`;
}

// Toggle Theme
function toggleTheme() {
    isDarkMode = !isDarkMode;
    localStorage.setItem('darkMode', isDarkMode);
    document.body.className = `${isDarkMode ? 'dark' : 'light'}-mode min-h-screen`;
    document.getElementById('themeIcon').textContent = isDarkMode ? '‚òÄÔ∏è' : 'üåô';
}

// Favorites Functions
function addToFavorites() {
    if (!currentWeatherData) return;

    const cityName = currentWeatherData.name;
    if (favorites.includes(cityName)) {
        alert('‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î‡πÅ‡∏•‡πâ‡∏ß');
        return;
    }

    favorites.push(cityName);
    localStorage.setItem('favorites', JSON.stringify(favorites));
    updateFavoritesList();
    alert(`‡πÄ‡∏û‡∏¥‡πà‡∏° ${cityName} ‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î‡πÅ‡∏•‡πâ‡∏ß!`);
}

function removeFavorite(city) {
    favorites = favorites.filter(f => f !== city);
    localStorage.setItem('favorites', JSON.stringify(favorites));
    updateFavoritesList();
}

function clearFavorites() {
    if (favorites.length === 0) return;
    if (confirm('‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?')) {
        favorites = [];
        localStorage.setItem('favorites', JSON.stringify(favorites));
        updateFavoritesList();
    }
}

function updateFavoritesList() {
    const container = document.getElementById('favoritesList');
    if (favorites.length === 0) {
        container.innerHTML = '<p class="text-white/60 text-sm">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡∏î</p>';
        return;
    }

    container.innerHTML = favorites.map(city => `
                <div class="glass rounded-xl px-4 py-2 flex items-center gap-2">
                    <button onclick="searchFavorite('${city}')" class="text-white hover:text-blue-200 text-sm">
                        ${city}
                    </button>
                    <button onclick="removeFavorite('${city}')" class="text-white/60 hover:text-red-300 text-xs">
                        ‚úï
                    </button>
                </div>
            `).join('');
}

async function searchFavorite(city) {
    document.getElementById('cityInput').value = city;
    await searchWeather();
}

// Initialize
document.addEventListener('DOMContentLoaded', () => {
    document.body.className = `${isDarkMode ? 'dark' : 'light'}-mode min-h-screen`;
    document.getElementById('themeIcon').textContent = isDarkMode ? '‚òÄÔ∏è' : 'üåô';
    document.getElementById('cityInput').addEventListener('keypress', e => e.key === 'Enter' && searchWeather());
    updateFavoritesList();
});